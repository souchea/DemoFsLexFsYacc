// Signature file for parser generated by fsyacc
module FsLexYacc.Parser
type token = 
  | LPAREN
  | RPAREN
  | LSCOPE
  | RSCOPE
  | LBRACKET
  | RBRACKET
  | IF
  | THEN
  | ELSE
  | EOF
  | PERCENT
  | COMMA
  | EQUALS
  | STARTSWITH
  | ENDSWITH
  | LENGTH
  | OR
  | AND
  | FLOAT of (System.Double)
  | INT of (System.Int32)
  | VAL of (string)
type tokenId = 
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LSCOPE
    | TOKEN_RSCOPE
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_EOF
    | TOKEN_PERCENT
    | TOKEN_COMMA
    | TOKEN_EQUALS
    | TOKEN_STARTSWITH
    | TOKEN_ENDSWITH
    | TOKEN_LENGTH
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_VAL
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_ParsedLine
    | NONTERM_Expr
    | NONTERM_ExprList
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( FsLexYacc.Ast.ParsedLine ) 
